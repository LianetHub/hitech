/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\r\n\r\n    // detect touch devices\r\n\r\n    const isMobile = {\r\n        isTouchDevice: function () {\r\n            return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\r\n        },\r\n        userAgent: function () {\r\n            return /Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i.test(navigator.userAgent);\r\n        },\r\n        any: function () {\r\n            return isMobile.isTouchDevice() || isMobile.userAgent();\r\n        }\r\n    };\r\n\r\n    function getNavigator() {\r\n        const body = document.body;\r\n\r\n        if (isMobile.any() || window.innerWidth < 992) {\r\n            body.classList.remove('_pc');\r\n            body.classList.add('_touch');\r\n        } else {\r\n            body.classList.remove('_touch');\r\n            body.classList.add('_pc');\r\n        }\r\n    }\r\n\r\n    getNavigator();\r\n\r\n    window.addEventListener('resize', getNavigator);\r\n\r\n\r\n\r\n\r\n    var phoneInputs = document.querySelectorAll('input[type=\"tel\"]');\r\n\r\n    var getInputNumbersValue = function (input) {\r\n        // Return stripped input value — just numbers\r\n        return input.value.replace(/\\D/g, '');\r\n    }\r\n\r\n    var onPhonePaste = function (e) {\r\n        var input = e.target,\r\n            inputNumbersValue = getInputNumbersValue(input);\r\n        var pasted = e.clipboardData || window.clipboardData;\r\n        if (pasted) {\r\n            var pastedText = pasted.getData('Text');\r\n            if (/\\D/g.test(pastedText)) {\r\n                // Attempt to paste non-numeric symbol — remove all non-numeric symbols,\r\n                // formatting will be in onPhoneInput handler\r\n                input.value = inputNumbersValue;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    var onPhoneInput = function (e) {\r\n        var input = e.target,\r\n            inputNumbersValue = getInputNumbersValue(input),\r\n            selectionStart = input.selectionStart,\r\n            formattedInputValue = \"\";\r\n\r\n        if (!inputNumbersValue) {\r\n            return input.value = \"\";\r\n        }\r\n\r\n        if (input.value.length != selectionStart) {\r\n            // Editing in the middle of input, not last symbol\r\n            if (e.data && /\\D/g.test(e.data)) {\r\n                // Attempt to input non-numeric symbol\r\n                input.value = inputNumbersValue;\r\n            }\r\n            return;\r\n        }\r\n\r\n        if ([\"7\", \"8\", \"9\"].indexOf(inputNumbersValue[0]) > -1) {\r\n            if (inputNumbersValue[0] == \"9\") inputNumbersValue = \"7\" + inputNumbersValue;\r\n            var firstSymbols = (inputNumbersValue[0] == \"8\") ? \"8\" : \"+7\";\r\n            formattedInputValue = input.value = firstSymbols + \" \";\r\n            if (inputNumbersValue.length > 1) {\r\n                formattedInputValue += '(' + inputNumbersValue.substring(1, 4);\r\n            }\r\n            if (inputNumbersValue.length >= 5) {\r\n                formattedInputValue += ') ' + inputNumbersValue.substring(4, 7);\r\n            }\r\n            if (inputNumbersValue.length >= 8) {\r\n                formattedInputValue += '-' + inputNumbersValue.substring(7, 9);\r\n            }\r\n            if (inputNumbersValue.length >= 10) {\r\n                formattedInputValue += '-' + inputNumbersValue.substring(9, 11);\r\n            }\r\n        } else {\r\n            formattedInputValue = '+' + inputNumbersValue.substring(0, 16);\r\n        }\r\n        input.value = formattedInputValue;\r\n    }\r\n    var onPhoneKeyDown = function (e) {\r\n        // Clear input after remove last symbol\r\n        var inputValue = e.target.value.replace(/\\D/g, '');\r\n        if (e.keyCode == 8 && inputValue.length == 1) {\r\n            e.target.value = \"\";\r\n        }\r\n    }\r\n\r\n    for (var phoneInput of phoneInputs) {\r\n        phoneInput.addEventListener('keydown', onPhoneKeyDown);\r\n        phoneInput.addEventListener('input', onPhoneInput, false);\r\n        phoneInput.addEventListener('paste', onPhonePaste, false);\r\n    }\r\n\r\n\r\n\r\n\r\n    // click handlers\r\n\r\n    document.addEventListener('click', (e) => {\r\n\r\n        const target = e.target;\r\n\r\n\r\n        if (target.closest('.icon-menu') || target.classList.contains('menu__close')) {\r\n            getMenu()\r\n        }\r\n\r\n        if (target.classList.contains('menu__arrow')) {\r\n\r\n            let subMenu = target.nextElementSibling;\r\n\r\n            if (document.querySelector('.menu__arrow.active') !== target) {\r\n\r\n                if (document.querySelector('.submenu.open')) {\r\n                    document.querySelector('.submenu.open').classList.remove('open');\r\n                }\r\n                if (document.querySelector('.menu__arrow.active')) {\r\n                    document.querySelector('.menu__arrow.active').classList.remove('active');\r\n                }\r\n            }\r\n\r\n            subMenu.classList.toggle('open');\r\n            target.classList.toggle('active');\r\n\r\n        }\r\n\r\n        if (target.classList.contains('product-card__tabs-btn')) {\r\n            const tabsContainer = target.closest('.product-card__tabs');\r\n            const allTabs = tabsContainer.querySelectorAll('.product-card__tabs-btn');\r\n            const contentContainer = tabsContainer.nextElementSibling;\r\n            const allContents = contentContainer.querySelectorAll('.product-card__tab-content');\r\n\r\n            const index = Array.from(allTabs).indexOf(target);\r\n\r\n\r\n            allTabs.forEach(tab => tab.classList.remove('active'));\r\n            allContents.forEach(content => content.classList.remove('active'));\r\n\r\n\r\n            target.classList.add('active');\r\n            if (allContents[index]) {\r\n                allContents[index].classList.add('active');\r\n            }\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n    function getMenu() {\r\n        document.querySelector('.header').classList.toggle('open-menu');\r\n        toggleLocking();\r\n    }\r\n\r\n    function toggleLocking(lockClass) {\r\n\r\n        const body = document.body;\r\n        let className = lockClass ? lockClass : \"lock\";\r\n        let pagePosition;\r\n\r\n        if (body.classList.contains(className)) {\r\n            pagePosition = parseInt(document.body.dataset.position, 10);\r\n            body.dataset.position = pagePosition;\r\n            body.style.top = -pagePosition + 'px';\r\n        } else {\r\n            pagePosition = window.scrollY;\r\n            body.style.top = 'auto';\r\n            window.scroll({ top: pagePosition, left: 0 });\r\n            document.body.removeAttribute('data-position');\r\n        }\r\n\r\n        let lockPaddingValue = body.classList.contains(className)\r\n            ? \"0px\"\r\n            : window.innerWidth -\r\n            document.querySelector(\".wrapper\").offsetWidth +\r\n            \"px\";\r\n\r\n        body.style.paddingRight = lockPaddingValue;\r\n        body.classList.toggle(className);\r\n\r\n    }\r\n\r\n    // sliders\r\n\r\n    if (document.querySelector('.promo__slider')) {\r\n        new Swiper('.promo__slider', {\r\n            slidesPerView: \"auto\",\r\n            spaceBetween: 16,\r\n            breakpoints: {\r\n                991.98: {\r\n                    slidesPerView: 3\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    if (document.querySelector('.cases__slider-block')) {\r\n        new Swiper('.cases__slider-block', {\r\n            spaceBetween: 15,\r\n            slidesPerView: 1,\r\n\r\n            watchSlidesProgress: true,\r\n            navigation: {\r\n                nextEl: \".cases__next\",\r\n                prevEl: \".cases__prev\"\r\n            },\r\n            breakpoints: {\r\n                991.98: {\r\n                    slidesPerView: 2,\r\n                    spaceBetween: 18,\r\n                },\r\n            }\r\n        })\r\n    }\r\n\r\n    if (document.querySelector('.support__slider')) {\r\n        new Swiper('.support__slider', {\r\n            slidesPerView: \"auto\",\r\n            spaceBetween: 30,\r\n            breakpoints: {\r\n                1279.98: {\r\n                    slidesPerView: 4,\r\n                },\r\n            }\r\n        })\r\n    }\r\n\r\n    if (document.querySelector('.reviews__slider')) {\r\n        new Swiper('.reviews__slider', {\r\n            spaceBetween: 30,\r\n            navigation: {\r\n                nextEl: \".reviews__next\",\r\n                prevEl: \".reviews__prev\"\r\n            },\r\n            pagination: {\r\n                el: \".reviews__pagination\",\r\n                clickable: true,\r\n            },\r\n            breakpoints: {\r\n                575.98: {\r\n                    slidesPerView: 2,\r\n                },\r\n                991.98: {\r\n                    slidesPerView: 3,\r\n                },\r\n                1439.98: {\r\n                    slidesPerView: 4,\r\n                },\r\n            }\r\n        })\r\n    }\r\n\r\n    if (document.querySelector('.news__slider')) {\r\n        new Swiper('.news__slider', {\r\n\r\n            spaceBetween: 30,\r\n            navigation: {\r\n                nextEl: \".news__next\",\r\n                prevEl: \".news__prev\"\r\n            },\r\n            pagination: {\r\n                el: \".news__pagination\",\r\n                clickable: true,\r\n            },\r\n            breakpoints: {\r\n                575.98: {\r\n                    slidesPerView: 2,\r\n                },\r\n                991.98: {\r\n                    slidesPerView: 3,\r\n                },\r\n                1439.98: {\r\n                    slidesPerView: 4,\r\n                },\r\n            }\r\n        })\r\n    }\r\n\r\n    if (document.querySelector('.services__slider')) {\r\n        getMobileSlider('.services__slider', {\r\n            autoHeight: true,\r\n            pagination: {\r\n                el: \".services__pagination\",\r\n                clickable: true,\r\n            },\r\n        })\r\n    }\r\n\r\n    if (document.querySelectorAll('.products__slider').length > 0) {\r\n        document.querySelectorAll('.products__slider').forEach(function (slider) {\r\n            getMobileSlider(slider, {\r\n                slidesPerView: \"auto\",\r\n                spaceBetween: 10,\r\n                pagination: {\r\n                    el: slider.querySelector(\".products__pagination\"),\r\n                    clickable: true,\r\n                },\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    if (document.querySelectorAll('.products__carousel').length > 0) {\r\n        document.querySelectorAll('.products__carousel').forEach(function (slider) {\r\n            new Swiper(slider, {\r\n                slidesPerView: \"auto\",\r\n                spaceBetween: 30,\r\n                watchOverflow: true,\r\n                pagination: {\r\n                    el: slider.querySelector(\".products__pagination\"),\r\n                    clickable: true,\r\n                },\r\n            })\r\n        })\r\n    }\r\n\r\n    if (document.querySelectorAll('.catalog__products-slider').length > 0) {\r\n        document.querySelectorAll('.catalog__products-slider').forEach(function (slider) {\r\n            const wrapper = slider.closest('.catalog__products-block');\r\n            const prevBtn = wrapper.querySelector('.catalog__products-prev');\r\n            const nextBtn = wrapper.querySelector('.catalog__products-next');\r\n            const pagination = wrapper.querySelector('.catalog__products-pagination');\r\n\r\n            new Swiper(slider, {\r\n                slidesPerView: 1,\r\n                spaceBetween: 30,\r\n                watchOverflow: true,\r\n                pagination: {\r\n                    el: pagination,\r\n                    clickable: true,\r\n                },\r\n                navigation: {\r\n                    nextEl: nextBtn,\r\n                    prevEl: prevBtn,\r\n                },\r\n                breakpoints: {\r\n                    575.98: {\r\n                        slidesPerView: 1.5,\r\n                    },\r\n                    767.98: {\r\n                        slidesPerView: 2,\r\n                    },\r\n                    1699.98: {\r\n                        slidesPerView: 3,\r\n                    }\r\n                },\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n\r\n    function getMobileSlider(sliderName, options) {\r\n\r\n        let init = false;\r\n        let swiper = null;\r\n\r\n        function getSwiper() {\r\n            if (window.innerWidth <= 767.98) {\r\n                if (!init) {\r\n                    init = true;\r\n                    swiper = new Swiper(sliderName, options);\r\n                }\r\n            } else if (init) {\r\n                swiper.destroy();\r\n                swiper = null;\r\n                init = false;\r\n            }\r\n        }\r\n        getSwiper();\r\n        window.addEventListener(\"resize\", getSwiper);\r\n    }\r\n\r\n    // calalog highlight active category\r\n    const sections = document.querySelectorAll('.catalog__products-block');\r\n    const navLinks = document.querySelectorAll('.catalog__category');\r\n\r\n    if (sections.length !== 0 || navLinks.length !== 0) {\r\n\r\n        const options = {\r\n            root: null,\r\n            rootMargin: '0px 0px -50% 0px',\r\n            threshold: 0\r\n        };\r\n\r\n        const observer = new IntersectionObserver((entries) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    const sectionId = entry.target.id.replace(/^#/, '');\r\n\r\n                    navLinks.forEach(link => {\r\n                        const hrefId = link.getAttribute('href')?.replace(/^#/, '');\r\n                        link.classList.toggle('active', hrefId === sectionId);\r\n                    });\r\n                }\r\n            });\r\n        }, options);\r\n\r\n        sections.forEach(section => {\r\n            if (section.id) observer.observe(section);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    // init spollers\r\n\r\n    const spollersArray = document.querySelectorAll(\"[data-spollers]\");\r\n    if (spollersArray.length > 0) {\r\n\r\n        const spollersRegular = Array.from(spollersArray).filter(function (\r\n            item,\r\n            index,\r\n            self\r\n        ) {\r\n            return !item.dataset.spollers.split(\",\")[0];\r\n        });\r\n\r\n        if (spollersRegular.length > 0) {\r\n            initSpollers(spollersRegular);\r\n        }\r\n\r\n        const spollersMedia = Array.from(spollersArray).filter(function (\r\n            item,\r\n            index,\r\n            self\r\n        ) {\r\n            return item.dataset.spollers.split(\",\")[0];\r\n        });\r\n\r\n        if (spollersMedia.length > 0) {\r\n            const breakpointsArray = [];\r\n            spollersMedia.forEach((item) => {\r\n                const params = item.dataset.spollers;\r\n                const breakpoint = {};\r\n                const paramsArray = params.split(\",\");\r\n                breakpoint.value = paramsArray[0];\r\n                breakpoint.type = paramsArray[1] ? paramsArray[1].trim() : \"max\";\r\n                breakpoint.item = item;\r\n                breakpointsArray.push(breakpoint);\r\n            });\r\n\r\n\r\n            let mediaQueries = breakpointsArray.map(function (item) {\r\n                return (\r\n                    \"(\" +\r\n                    item.type +\r\n                    \"-width: \" +\r\n                    item.value +\r\n                    \"px),\" +\r\n                    item.value +\r\n                    \",\" +\r\n                    item.type\r\n                );\r\n            });\r\n            mediaQueries = mediaQueries.filter(function (item, index, self) {\r\n                return self.indexOf(item) === index;\r\n            });\r\n\r\n\r\n            mediaQueries.forEach((breakpoint) => {\r\n                const paramsArray = breakpoint.split(\",\");\r\n                const mediaBreakpoint = paramsArray[1];\r\n                const mediaType = paramsArray[2];\r\n                const matchMedia = window.matchMedia(paramsArray[0]);\r\n\r\n                const spollersArray = breakpointsArray.filter(function (item) {\r\n                    if (item.value === mediaBreakpoint && item.type === mediaType) {\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                matchMedia.addEventListener(\"change\", function () {\r\n                    initSpollers(spollersArray, matchMedia);\r\n                });\r\n                initSpollers(spollersArray, matchMedia);\r\n            });\r\n        }\r\n\r\n\r\n        function initSpollers(spollersArray, matchMedia = false) {\r\n            spollersArray.forEach((spollersBlock) => {\r\n                spollersBlock = matchMedia ? spollersBlock.item : spollersBlock;\r\n                if (matchMedia.matches || !matchMedia) {\r\n                    spollersBlock.classList.add(\"_init\");\r\n                    initSpollerBody(spollersBlock);\r\n                    spollersBlock.addEventListener(\"click\", setSpollerAction);\r\n                } else {\r\n                    spollersBlock.classList.remove(\"_init\");\r\n                    initSpollerBody(spollersBlock, false);\r\n                    spollersBlock.removeEventListener(\"click\", setSpollerAction);\r\n                }\r\n            });\r\n        }\r\n\r\n        function initSpollerBody(spollersBlock, hideSpollerBody = true) {\r\n            const spollerTitles = spollersBlock.querySelectorAll(\"[data-spoller]\");\r\n            if (spollerTitles.length > 0) {\r\n                spollerTitles.forEach((spollerTitle) => {\r\n                    if (hideSpollerBody) {\r\n                        spollerTitle.removeAttribute(\"tabindex\");\r\n                        if (!spollerTitle.classList.contains(\"_active\")) {\r\n                            spollerTitle.nextElementSibling.hidden = true;\r\n                        }\r\n                    } else {\r\n                        spollerTitle.setAttribute(\"tabindex\", \"-1\");\r\n                        spollerTitle.nextElementSibling.hidden = false;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function setSpollerAction(e) {\r\n            const el = e.target;\r\n            if (el.hasAttribute(\"data-spoller\") || el.closest(\"[data-spoller]\")) {\r\n                const spollerTitle = el.hasAttribute(\"data-spoller\")\r\n                    ? el\r\n                    : el.closest(\"[data-spoller]\");\r\n                const spollersBlock = spollerTitle.closest(\"[data-spollers]\");\r\n                const oneSpoller = spollersBlock.hasAttribute(\"data-one-spoller\")\r\n                    ? true\r\n                    : false;\r\n                if (!spollersBlock.querySelectorAll(\"._slide\").length) {\r\n                    if (oneSpoller && !spollerTitle.classList.contains(\"_active\")) {\r\n                        hideSpollersBody(spollersBlock);\r\n                    }\r\n                    spollerTitle.classList.toggle(\"_active\");\r\n                    spollerTitle.nextElementSibling.slideToggle(300);\r\n                }\r\n                e.preventDefault();\r\n            }\r\n        }\r\n\r\n        function hideSpollersBody(spollersBlock) {\r\n            const spollerActiveTitle = spollersBlock.querySelector(\r\n                \"[data-spoller]._active\"\r\n            );\r\n            if (spollerActiveTitle) {\r\n                spollerActiveTitle.classList.remove(\"_active\");\r\n                spollerActiveTitle.nextElementSibling.slideUp(300);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // custom select\r\n\r\n    class CustomSelect {\r\n\r\n        static openDropdown = null;\r\n\r\n        constructor(selectElement) {\r\n            this.$select = selectElement;\r\n            this.placeholder = this.$select.dataset.placeholder;\r\n            this.listCaption = this.$select.dataset.listCaption;\r\n            this.defaultText = this.getDefaultText();\r\n            this.selectName = this.$select.getAttribute('name');\r\n            this.$options = this.$select.querySelectorAll('option');\r\n            this.$dropdown = null;\r\n            this.initialState = {};\r\n            this.init();\r\n        }\r\n\r\n        init() {\r\n            if (!this.$select) return;\r\n            this.saveInitialState();\r\n            this.$select.classList.add('hidden');\r\n            this.renderDropdown();\r\n            this.setupEvents();\r\n        }\r\n\r\n        saveInitialState() {\r\n            const selectedOption = this.$select.options[this.$select.selectedIndex];\r\n            this.initialState = {\r\n                selectedText: selectedOption.text,\r\n                selectedValue: selectedOption.value,\r\n            };\r\n        }\r\n\r\n        getDefaultText() {\r\n            const selectedOption = this.$select.querySelector('option[selected]');\r\n            if (selectedOption) {\r\n                return selectedOption.text;\r\n            } else {\r\n                return this.placeholder || this.$select.options[this.$select.selectedIndex].text;\r\n            }\r\n        }\r\n\r\n        renderDropdown() {\r\n            const isDisabled = this.$select.disabled;\r\n\r\n            const buttonTemplate = `\r\n            <button type=\"button\" class=\"dropdown__button icon-chevron\" \r\n                    aria-expanded=\"false\" \r\n                    aria-haspopup=\"true\" \r\n                    ${isDisabled ? 'disabled' : ''}>\r\n                <span class=\"dropdown__button-text\">${this.defaultText}</span>\r\n            </button>\r\n        `;\r\n\r\n\r\n            this.$dropdown = document.createElement('div');\r\n            this.$dropdown.classList.add('dropdown');\r\n\r\n\r\n            const captionTemplate = this.listCaption ? `<div class=\"dropdown__caption\">${this.listCaption}</div>` : '';\r\n\r\n            this.$dropdown.innerHTML = `\r\n            ${buttonTemplate}\r\n            <div class=\"dropdown__body\" aria-hidden=\"true\">\r\n               <div class=\"dropdown__content\">\r\n                    ${captionTemplate}\r\n                    <ul class=\"dropdown__list\" role=\"listbox\"></ul>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n            const list = this.$dropdown.querySelector('.dropdown__list');\r\n            this.$options.forEach(option => {\r\n                const value = option.value;\r\n                const text = option.text;\r\n                const isSelected = option.selected;\r\n                const isDisabled = option.disabled;\r\n\r\n                const listItem = document.createElement('li');\r\n                listItem.setAttribute('role', 'option');\r\n                listItem.setAttribute('data-value', value);\r\n                listItem.setAttribute('aria-checked', isSelected);\r\n                listItem.classList.add('dropdown__list-item');\r\n                if (isSelected) listItem.classList.add('selected');\r\n                if (isDisabled) listItem.classList.add('disabled');\r\n                if (isDisabled) listItem.setAttribute('aria-disabled', 'true');\r\n                listItem.textContent = text;\r\n                list.appendChild(listItem);\r\n            });\r\n\r\n            this.$select.after(this.$dropdown);\r\n        }\r\n\r\n        setupEvents() {\r\n            const button = this.$dropdown.querySelector('.dropdown__button');\r\n            button.addEventListener('click', (event) => {\r\n                event.stopPropagation();\r\n                const isOpen = this.$dropdown.classList.contains('visible');\r\n                this.toggleDropdown(!isOpen);\r\n            });\r\n\r\n            const listItems = this.$dropdown.querySelectorAll('.dropdown__list-item');\r\n            listItems.forEach(item => {\r\n                item.addEventListener('click', (event) => {\r\n                    event.stopPropagation();\r\n                    if (!item.classList.contains('disabled')) {\r\n                        this.selectOption(item);\r\n                    }\r\n                });\r\n            });\r\n\r\n            document.addEventListener('click', () => this.closeDropdown());\r\n            document.addEventListener('keydown', (event) => {\r\n                if (event.key === 'Escape') this.closeDropdown();\r\n            });\r\n\r\n            this.$select.closest('form').addEventListener('reset', () => this.restoreInitialState());\r\n\r\n            const observerDisabled = new MutationObserver(() => {\r\n                const isSelectDisabled = this.$select.disabled;\r\n                const button = this.$dropdown.querySelector('.dropdown__button');\r\n\r\n                button.disabled = isSelectDisabled;\r\n            });\r\n\r\n            observerDisabled.observe(this.$select, {\r\n                attributes: true,\r\n                attributeFilter: ['disabled']\r\n            });\r\n\r\n            const observerSelected = new MutationObserver((mutations) => {\r\n                mutations.forEach((mutation) => {\r\n                    if (mutation.type === 'attributes' && mutation.attributeName === 'disabled') {\r\n                        const option = mutation.target;\r\n                        const value = option.value;\r\n                        const isDisabled = option.disabled;\r\n                        const listItem = this.$dropdown.querySelector(`.dropdown__list-item[data-value=\"${value}\"]`);\r\n\r\n                        listItem.classList.toggle('disabled', isDisabled);\r\n                        if (isDisabled) {\r\n                            listItem.setAttribute('aria-disabled', 'true');\r\n                        } else {\r\n                            listItem.removeAttribute('aria-disabled');\r\n                        }\r\n                    }\r\n\r\n                    if (mutation.type === 'attributes' && mutation.attributeName === 'selected') {\r\n                        this.syncSelectedOption();\r\n                    }\r\n                });\r\n            });\r\n\r\n            observerSelected.observe(this.$select, {\r\n                childList: true,\r\n                subtree: true,\r\n                attributes: true,\r\n                attributeFilter: ['selected', 'disabled']\r\n            });\r\n        }\r\n\r\n        toggleDropdown(isOpen) {\r\n            if (isOpen && CustomSelect.openDropdown && CustomSelect.openDropdown !== this) {\r\n                CustomSelect.openDropdown.closeDropdown();\r\n            }\r\n\r\n            const body = this.$dropdown.querySelector('.dropdown__body');\r\n            const list = this.$dropdown.querySelector('.dropdown__list');\r\n            const hasScroll = list.scrollHeight > list.clientHeight;\r\n\r\n            this.$dropdown.classList.toggle('visible', isOpen);\r\n            this.$dropdown.querySelector('.dropdown__button').setAttribute('aria-expanded', isOpen);\r\n            body.setAttribute('aria-hidden', !isOpen);\r\n\r\n            if (isOpen) {\r\n                CustomSelect.openDropdown = this;\r\n                this.$dropdown.classList.remove('dropdown-top');\r\n                const dropdownRect = body.getBoundingClientRect();\r\n                const viewportHeight = window.innerHeight;\r\n                if (dropdownRect.bottom > viewportHeight) {\r\n                    this.$dropdown.classList.add('dropdown-top');\r\n                }\r\n\r\n                list.classList.toggle('has-scroll', hasScroll);\r\n            } else {\r\n                if (CustomSelect.openDropdown === this) {\r\n                    CustomSelect.openDropdown = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        closeDropdown() {\r\n            this.toggleDropdown(false);\r\n        }\r\n\r\n        selectOption(item) {\r\n            const value = item.dataset.value;\r\n            const text = item.textContent;\r\n\r\n            const listItems = this.$dropdown.querySelectorAll('.dropdown__list-item');\r\n            listItems.forEach(listItem => {\r\n                listItem.classList.remove('selected');\r\n                listItem.setAttribute('aria-checked', 'false');\r\n            });\r\n            item.classList.add('selected');\r\n            item.setAttribute('aria-checked', 'true');\r\n\r\n\r\n\r\n            this.$dropdown.querySelector('.dropdown__button').classList.add('selected');\r\n            this.$dropdown.querySelector('.dropdown__button-text').textContent = text;\r\n            this.$select.value = value;\r\n            this.$select.dispatchEvent(new Event('change'));\r\n            this.closeDropdown();\r\n        }\r\n\r\n        restoreInitialState() {\r\n            const hasPlaceholder = this.placeholder !== undefined;\r\n\r\n            if (hasPlaceholder) {\r\n                this.$select.selectedIndex = -1;\r\n                this.$dropdown.querySelector('.dropdown__button-text').textContent = this.placeholder;\r\n                this.$dropdown.querySelector('.dropdown__button').classList.remove('selected');\r\n\r\n                const listItems = this.$dropdown.querySelectorAll('.dropdown__list-item');\r\n                listItems.forEach(listItem => {\r\n                    listItem.classList.remove('selected');\r\n                    listItem.setAttribute('aria-checked', 'false');\r\n                });\r\n\r\n                this.$select.dispatchEvent(new Event('change'));\r\n            } else {\r\n                const state = this.initialState;\r\n                this.$select.value = state.selectedValue;\r\n                this.$select.dispatchEvent(new Event('change'));\r\n\r\n                const listItems = this.$dropdown.querySelectorAll('.dropdown__list-item');\r\n                listItems.forEach(listItem => {\r\n                    listItem.classList.remove('selected');\r\n                    listItem.setAttribute('aria-checked', 'false');\r\n                });\r\n\r\n                const selectedItem = this.$dropdown.querySelector(`.dropdown__list-item[data-value=\"${state.selectedValue}\"]`);\r\n\r\n                if (selectedItem) {\r\n                    selectedItem.classList.add('selected');\r\n                    selectedItem.setAttribute('aria-checked', 'true');\r\n                }\r\n\r\n                this.$dropdown.querySelector('.dropdown__button-text').textContent = state.selectedText;\r\n                this.$dropdown.querySelector('.dropdown__button').classList.add('selected');\r\n            }\r\n        }\r\n\r\n        syncSelectedOption() {\r\n            const selectedOption = this.$select.options[this.$select.selectedIndex];\r\n            const selectedValue = selectedOption.value;\r\n            const selectedText = selectedOption.text;\r\n\r\n            const listItems = this.$dropdown.querySelectorAll('.dropdown__list-item');\r\n            listItems.forEach(listItem => {\r\n                listItem.classList.remove('selected');\r\n                listItem.setAttribute('aria-checked', 'false');\r\n            });\r\n\r\n            const selectedItem = this.$dropdown.querySelector(`.dropdown__list-item[data-value=\"${selectedValue}\"]`);\r\n            selectedItem.classList.add('selected');\r\n            selectedItem.setAttribute('aria-checked', 'true');\r\n\r\n            this.$dropdown.querySelector('.dropdown__button-text').textContent = selectedText;\r\n        }\r\n    }\r\n\r\n    document.querySelectorAll('.select')?.forEach(element => {\r\n        new CustomSelect(element);\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n\r\n});\r\n\r\n\r\n\r\n// Инициализация библиотеки Fancybox\r\n// Документация: https://fancyapps.com/fancybox/\r\n\r\nif (typeof Fancybox !== \"undefined\" && Fancybox !== null) {\r\n    Fancybox.bind(\"[data-fancybox]\", {\r\n        dragToClose: false,\r\n        closeButton: false\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Выполняет анимацию плавного появления или скрытия HTML-элемента (аналог slideToggle).\r\n *\r\n * Методы:\r\n * \r\n * 1. element.slideToggle(duration, callback)\r\n *    Переключает видимость элемента:\r\n *    - Если элемент скрыт (высота = 0), он будет плавно показан (slide down).\r\n *    - Если элемент видим, он будет скрыт (slide up).\r\n *\r\n * 2. element.slideUp(duration, callback)\r\n *    Плавно скрывает элемент, уменьшая его высоту до 0.\r\n *\r\n * 3. element.slideDown(duration, callback)\r\n *    Плавно показывает элемент, увеличивая его высоту до естественной.\r\n *\r\n * @param {number} duration - Длительность анимации в миллисекундах.\r\n * @param {function} [callback] - Необязательная функция, вызываемая по завершении анимации.\r\n */\r\n\r\nHTMLElement.prototype.slideToggle = function (duration, callback) {\r\n    if (this.clientHeight === 0) {\r\n        _s(this, duration, callback, true);\r\n    } else {\r\n        _s(this, duration, callback);\r\n    }\r\n};\r\n\r\nHTMLElement.prototype.slideUp = function (duration, callback) {\r\n    _s(this, duration, callback);\r\n};\r\n\r\nHTMLElement.prototype.slideDown = function (duration, callback) {\r\n    _s(this, duration, callback, true);\r\n};\r\n\r\nfunction _s(el, duration, callback, isDown) {\r\n\r\n    if (typeof duration === 'undefined') duration = 400;\r\n    if (typeof isDown === 'undefined') isDown = false;\r\n\r\n    el.style.overflow = \"hidden\";\r\n    if (isDown) el.style.display = \"block\";\r\n\r\n    var elStyles = window.getComputedStyle(el);\r\n\r\n    var elHeight = parseFloat(elStyles.getPropertyValue('height'));\r\n    var elPaddingTop = parseFloat(elStyles.getPropertyValue('padding-top'));\r\n    var elPaddingBottom = parseFloat(elStyles.getPropertyValue('padding-bottom'));\r\n    var elMarginTop = parseFloat(elStyles.getPropertyValue('margin-top'));\r\n    var elMarginBottom = parseFloat(elStyles.getPropertyValue('margin-bottom'));\r\n\r\n    var stepHeight = elHeight / duration;\r\n    var stepPaddingTop = elPaddingTop / duration;\r\n    var stepPaddingBottom = elPaddingBottom / duration;\r\n    var stepMarginTop = elMarginTop / duration;\r\n    var stepMarginBottom = elMarginBottom / duration;\r\n\r\n    var start;\r\n\r\n    function step(timestamp) {\r\n\r\n        if (start === undefined) start = timestamp;\r\n\r\n        var elapsed = timestamp - start;\r\n\r\n        if (isDown) {\r\n            el.style.height = (stepHeight * elapsed) + \"px\";\r\n            el.style.paddingTop = (stepPaddingTop * elapsed) + \"px\";\r\n            el.style.paddingBottom = (stepPaddingBottom * elapsed) + \"px\";\r\n            el.style.marginTop = (stepMarginTop * elapsed) + \"px\";\r\n            el.style.marginBottom = (stepMarginBottom * elapsed) + \"px\";\r\n        } else {\r\n            el.style.height = elHeight - (stepHeight * elapsed) + \"px\";\r\n            el.style.paddingTop = elPaddingTop - (stepPaddingTop * elapsed) + \"px\";\r\n            el.style.paddingBottom = elPaddingBottom - (stepPaddingBottom * elapsed) + \"px\";\r\n            el.style.marginTop = elMarginTop - (stepMarginTop * elapsed) + \"px\";\r\n            el.style.marginBottom = elMarginBottom - (stepMarginBottom * elapsed) + \"px\";\r\n        }\r\n\r\n        if (elapsed >= duration) {\r\n            el.style.height = \"\";\r\n            el.style.paddingTop = \"\";\r\n            el.style.paddingBottom = \"\";\r\n            el.style.marginTop = \"\";\r\n            el.style.marginBottom = \"\";\r\n            el.style.overflow = \"\";\r\n            if (!isDown) el.style.display = \"none\";\r\n            if (typeof callback === 'function') callback();\r\n        } else {\r\n            window.requestAnimationFrame(step);\r\n        }\r\n    }\r\n\r\n    window.requestAnimationFrame(step);\r\n}\n\n//# sourceURL=webpack://tlm-gulp/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;